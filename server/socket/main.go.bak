	// Socket.io - Connection event
	// socket.On("connection", func (sock socketio.Socket) {
	//   log.Println(DEBUG, "socket:", fmt.Sprintf("Incoming connection %s %s", sock.Id(), sock.Request().URL.Query().Get("type")))
	//
	//   var cl *client.Client
	//   var op *operator.Operator
	//   t := sock.Request().URL.Query().Get("type")
	//
	//   if (t === "operator") {
	//     log.Println(DEBUG, "socket: OPERATOR!!")
	//   } else if (t === "client") {
	//
	//     hasFingerprint := false
	//     hasCookie := false
	//     hasIP := false
	//     // Does this user match a previous fingerprint ?
	//     //  Does user have cookie?
	//     //  Does user have known IP?
	//
	//     // If yes, lets get/update the user
	//     if (hasFingerprint && hasCookie && hasIP) {
	//
	//     } else { // If no, lets create new user
	//       cl = client.Create(client.Client{
	//           Name: "Site Visitor",
	//         }, sock)
	//
	//       db.Put(cl)
	//     }
	//
	//     // Create new chat, assign user
	//     ch := chat.Chat{
	//       ID: sock.Id(),
	//       Client: cl,
	//       Operator: op,
	//       Open: true,
	//       CreationTime: time.Now(),
	//       UpdatedTime: time.Now(),
	//     }
	//
	//     db.Put(ch)
	//   } else {
	//     log.Println(ERROR, "unable to find connection type.")
	//   }
	//
	//
	//   // Message event
	//   sock.On("client:message", func (msg string) {
	//     log.Println(DEBUG, "client", fmt.Sprintf("%s: %s", sock.Id(), msg, sock.Request().Header))
	//
	//     // Create and Save message
	//     m := chat.Message{
	//       Timestamp: time.Now(),
	//       Content: msg,
	//       Author: ch.Client.StoreKey(),
	//       Chat: ch.ID,
	//     }
	//     db.Put(m)
	//
	//     // Update and Save chat
	//     ch.UpdatedTime = time.Now()
	//     db.Put(ch)
	//
	//   })
	//
	//   // Disconnection event
	//   sock.On("disconnection", func () {
	//     log.Println(DEBUG, "socket:", fmt.Sprintf("%s disconnected", sock.Id()))
	//
	//     // Save chat
	//   })
	// })
	//
	// socket.On("error", func (so socketio.Socket, err error) {
	//     log.Println(ERROR, "socket:", err)
	// })

